---
title: "Problem Set 1 Solutions"
subtitle: "Introduction to R | University of Oxford Sociology"
author: "Casey Breen"
format: pdf
---

# Problem Set 1

This document contans solutions to all exercises from problem set 1. To reinforce your understanding, please try your best to complete these exercises independently before referring to the solutions.

## Exercise 1: Assignment, Arithmetic, Logical Expressions

1.1 Assign `x` and `y` to take values 3 and 4.

```{r}
#| echo: true
#| 
# Assign x and y to take values 3 and 4
x <- 3
y <- 4
```

1.2 Assign `z` as the product of `x` and `y`.

```{r}
#| echo: true
#| 
# Create a new variable z as the product of variables x and y
z <- x * y
```

1.3 Calculate the square of 3 and assign it to `three_squared`.

```{r}
#| echo: true
#| 
# Write code to calculate the square of 3 and assign it to a variable three_squared
three_squared <- 3^2
```

1.4 Write a logical expression to check if `three_squared` is greater than 10.

```{r}
#| echo: true
#| 
# Write a logical expression to check if `three_squared` is greater than 10
three_squared > 10

```

1.5 Write a logical expression to test whether `three_squared` is *not* greater than 10. Use the negate (`!`) operator.

```{r}
#| echo: true

# Write a logical expression to check if `three_squared` is not greater than 10
!three_squared > 10
```

## Exercise 2: Sequencing

2.1 Generate vectors containing the numbers 100 to 105 using three different methods (`c()`, `seq()`, `:`). Discuss the convenience of each method.

```{r}
#| echo: true
#| 
# Generate a vector using c() method
vector_c <- c(100, 101, 102, 103, 104, 105)

# Generate a vector using seq() method
vector_seq <- seq(100, 105, by = 1)

# Generate a vector using : operator
vector_colon <- c(100:105) 
```

***Answer**: The first method, generating a vector using `c()` is convenient when you are only including a few elements in your sequence or there is no clear pattern. The second method, using `seq`, is convenient when the numbers follow a pattern but not necessarily just increment by 1. The third method is most convenient to generate numbers in a sequence increasing or decreasing by exactly 1.*

2.2 Generate a sequence of all even numbers between 0 and 100. Use the `seq()` function.

```{r}
#| echo: true
# Generate a sequence of all even numbers between 0 and 100
even_seq <- seq(0, 100, by = 2)
even_seq
```

2.3 Create a descending sequence from 100 to 1 and assign it to a variable. Use the `seq()` function.

```{r}
#| echo: true
#| 
# Create a descending sequence of numbers from 100 to 1
desc_seq_decrease <- seq(100, 1, by = -1)
desc_seq_decrease
```

## Exercise 3: Data Generation and Basic Statistical Analysis

3.1 Generate a sample of 100 observations from a normal distribution with a mean of 10 and a standard deviation of 2. Use the `rnorm()` function.

```{r}
#| echo: true
#| 
sim_data <- rnorm(n = 100,
                  mean = 10,
                  sd = 2)
```

3.2 What are the 1st, 10th, and 100th elements of this `vector`?

```{r}
sim_data[c(1, 10, 100)]
```

3.3 Calculate the mean of this `vector`. How does this *sample* mean relate to the theoretical *population* mean (hint: population mean = 10) of the distribution?

```{r}
#| echo: true
#| 
mean(sim_data)
```

***Answer**: This is relatively close to, but not exactly, the population mean. This is because we are taking a random sample from the distribution.*

3.4 Calculate the difference between the *sample* mean and the *population* mean. Discuss the reason for the discrepancy.

```{r}
#| echo: true
#| 
mean(sim_data) - 10

```

3.5 Repeat steps 1 and 3 with a sample size of 10,000. Did the difference between the sample mean and the population mean decrease? Why?

```{r}
#| echo: true
## simulate 10000 draws 
sim_data_10000 <- rnorm(n = 10000,
                  mean = 10,
                  sd = 2)

mean_sim_data_10000 <- mean(sim_data_10000)

## 
mean_sim_data_10000 - 10
```

***Answer**: The difference between the sample mean and the population mean decreased as we increased our sample size. This is because as our sample size increases, the mean of the sample tends towards the population mean. This is a fundamental concept in statistics: the law of large numbers.*
