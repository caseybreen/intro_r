---
title: |
    | Introduction to R
    | Session 2
subtitle: "Department of Sociology | University of Oxford"
author: "Casey Breen"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  revealjs:
    slide-number: true
    show-slide-number: all
---

## Intro to `R` -- Housekeeping

```{r}
library(here)
library(tidyverse)

censoc <- read_csv(here("data/censoc_numident_demo_v2.1.csv"))
```

-   Course materials available from:

    -   [www.github.com/caseybreen/intro_r](www.github.com/caseybreen/intro_r)

-   My email: [casey.breen\@sociology.ac.uk.ox](casey.breen@sociology.ac.uk.ox)

## Recap of session 1

-   What's the difference between `R` and `RStudio`?
-   What's a `vector`? What's a `data.frame`?
-   What does the `$` operator do? What does `data$column_b` do?
-   What does `%in%` operator do?
-   What does the `!` operator do?

## Session 2

-   Reading in data

-   Data manipulation (`dplyr`)

-   Data visualization (`ggplot2`)

-   Best practices: coding style, commenting, and documentation

-   Resources for self-study

## Reading in data: paths

-   **Absolute Path**: Specifies the full URL or address to locate a file or directory. Starts with the root directory.

    -   Windows: **`C:\Users\username\folder\file.csv`**

    -   macOS/Linux: **`/home/username/folder/file.csv`**

-   **Relative Path**: Specifies how to find the file or directory based on the current working directory.

    -   **`folder/file.csv`**

## Getting working directory

-   The working directory is the folder where your R session or script looks for files to read, or where it saves files you write

-   Commands like **`read.csv("file.csv")`** or **`write.csv(data, "file.csv")`** will read from or write to this directory by default

-   You can check the current working directory with **`getwd()`** and set it with **`setwd("/path/to/folder")`** in R

```{r}
#| echo: true
getwd()

```

## Reading in .csv files

-   To read in .csv files use `read_csv()`

    -   This will read in the .csv file into memory as a `data frame`

```{r}
#| echo: true
#| eval: false

library(tidyverse)
df <- read_csv("dataset.csv")
```

-   Write out .csv file using `write_csv()`:

```{r}
#| echo: true
#| eval: false
write_csv(data, "dataset_v2.csv") 
```

## In-class exercise 1

1.  Load and install the `tidyverse` packages using the commands `install.packages()` and `library()`
2.  Use the `read_csv()` function to read in the dataset and assign it to the object `censoc`
3.  Use the `head` command to look at the first 5 rows
4.  How many columns are in the dataset?
5.  How many rows are in the dataset?
6.  List the column names. What are a few research questions that could be addressed using this dataset?

## Exercise 1 solutions {.smaller}

1.  Load and install the `tidyverse` packages using the commands `install.packages()` and `library()`

```{r}
#| echo: true
#| eval: false
install.packages(tidyverse)
library(tidyverse)
```

3.  Use the `read_csv()` function to read in the dataset and assign it to the object `censoc`

```{r}
#| echo: true
#| eval: false
censoc <- read_csv("censoc_numident_demo_codebook_v2.1.pdf")
```

3.  Use the `head()` command to look at the first 5 rows

```{r}
#| echo: true
#| eval: false
head(censoc)
```

## Exercise 1 solutions (cont.) {.smaller}

4.  How many columns are in the dataset?

```{r}
#| echo: true
ncol(censoc)
```

5.  How many rows are in the dataset?

```{r}
#| echo: true
nrow(censoc)
```

6.  List the column names.

```{r}
#| echo: true
names(censoc)
```

## Break

-   10 minutes

## Tidyverse {.smaller}

::: columns
::: {.column width="50%"}
-   Packages: Collection of R packages designed for data science.
-   Data manipulation: Simplifies data cleaning and transformation with `dplyr`.
-   Data Visualization: Enables advanced plotting with `ggplot2`.
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6, fig.height=10}
knitr::include_graphics(here("slides/intro_r_day2_files/figs/tidyverse_fig.png"))
```
:::
:::

## Data Manipulation using `dplyr` {.smaller}

`filter`: Select rows based on conditions.

```{r}
#| echo: true
#| eval: false

filtered_df <- filter(df, age > 21)
```

`select`: choose specific columns

```{r}
#| echo: true
#| eval: false

filtered_df <- select(df)
```

`mutate`: Add or modify columns

```{r}
#| echo: true
#| eval: false

df <- mutate(df, age_next_year = age + 1)
```

`summarize` or `summarise` : aggregate or summarize data based on some criteria

```{r}
#| echo: true
#| eval: false

filtered_df <- summarize(df, mean(age))
```

`group_by`: Group data by variables. Often used with **`summarise()`**.

```{r}
#| echo: true
#| eval: false
filtered_df <- df %>% 
  group_by(gender) %>% 
  summarize(mean(age))
```

## The Pipe Operator `%>%` (or `|>` ) in R

-   Takes the output of one function and passes it as the first argument to another function

-   Simply put: "And then do..."

-   What's the below code doing?

```{r}
#| echo: true
#| eval: false
filtered_df <- df %>% 
  group_by(gender) %>% 
  summarize(mean(age))
```

## Live coding demo - data manipulation

-   Filter data

-   Selecting data

-   Calculating summary statistics

-   Calculating summary statistics by group

-   Creating new variable

## In-class exercise 2

1.  Filter the `censoc` data frame to include only women (sex == 2). Use the `filter` command.
2.  Filter the dataset to only include people born between 1905 and 1920 using the `byear` variable.
3.  Select the columns `histid`, `death_age`, `sex`, and `ownershp`
4.  Calculate the average age of death for women (hint: refer to question 1)

## Exercise 2 solutions {.smaller}

1.  Filter the `censoc` data frame to include only women (sex == 2). Use the `filter` command.

```{r}
#| echo: true
#| eval: false

censoc %>% 
  filter(sex == 2)

```

2.  Filter the dataset to only include people born between 1905 and 1920 using the `byear` variable. Do this two different ways.

```{r}
#| echo: true
#| eval: false

## method 1 
censoc %>% 
  filter(byear >= 1905 & byear <=1920)

## method 2 
censoc %>% 
  filter(byear >= 1904 & byear <=1920)
```

## Exercise 2 solutions (cont.) {.smaller}

3.  Select the columns `histid`, `death_age`, `sex`, and `ownershp`

```{r}
#| echo: true
censoc_select <- censoc %>% 
  select(histid, death_age, sex, ownershp) 

head(censoc_select)
```

4.  Calculate the average age of death for women (hint: refer to question 1)

```{r}
#| echo: true
censoc %>% 
  filter(sex == 2) %>% 
  summarize(mean_death_age_women = mean(death_age))
```

## Data visualization using ggplot

-   `ggplot2` provides a powerful and flexible system for creating a variety of data visualizations

-   `aes`: Defines what data to show

-   `geoms`: Chooses the type of plot

    -   `geom_point()`: Scatter plot

    -   `geom_line()`: Line plot

    -   `geom_bar()`: Bar chart

    -   `geom_histogram()`: Histogram

## Data visualization using ggplot {.smaller}

```{r}
#| echo: true
#| eval: false

ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
```

. . .

```{r}
#| echo: true
#| eval: true

ggplot(data = censoc) + 
  geom_histogram(aes(x = death_age)) + 
  facet_wrap(~sex) + ## look for both men and women 
  theme_bw() ## make prettier 
```

## Break

-   10 minutes

## Understanding NA Values in R

-   `NA` represents missing or undefined data.

    -   Can vary by data type (e.g., **`NA_character_`** and **`NA_integer_`**)

-   **`NA`** values can affect summary statistics and data visualization.

-   What happens when you run the code below?

```{r}
#| echo: true
#| eval: false 
vec <- c(1, 2, 3, NA)
mean(vec)
```

## Recoding values in R 

-   Sometime you want to recode a variable to take different values (e.g., recoding exact income to binary high/low income variable)

-   The **`case_when()`** function in R is part of the **`dplyr`** package and is used for creating new variables based on multiple conditions:

```{r}
#| echo: true
#| eval: false 
new_var <- case_when(
  condition1 ~ value1,
  condition2 ~ value2,
  TRUE ~ value_otherwise
)
```

## In-class exercise 3 {.smaller}

1.  Make a histogram of the variable `death_age`. When are most people dying?

2.  Make a histogram of the variable `byear`. When are most people born?

3.  Recode the variable `sex` from numeric (1, 2) to take values "men" and "women"

4.  Calculate the mean of of death for both men and women using `group_by()` and `summarize()`. Do men or women live longer?

5.  Make a histogram of the variable `death_age` for both men and women. Use the `filter()` command.

6.  Now try adding the following line to the histogram you made in question 1: `+ facet_wrap(~sex)`

## In-class exercises 3 {.smaller}

1.  Make a histogram of the variable `death_age`. When are most people dying?

```{r}
#| echo: true
#| eval: false
ggplot(data = censoc) + 
  geom_histogram(aes(x = death_age)) 
```

2.  Make a histogram of the variable `byear`. When are most people born?

```{r}
#| echo: true
#| eval: false
ggplot(data = censoc) + 
  geom_histogram(aes(x = death_age)) 
```

3.  Calculate the mean of of death for both men and women using `group_by()` and `summarize()`. Do men or women live longer?

```{r}
#| echo: true
#| eval: false 
ggplot(data = censoc) + 
  geom_histogram(aes(x = death_age)) 
```

## In-class exercises 3 (cont.) {.smaller}

4.  Make a histogram of the variable `death_age` for both men and women. Use the `filter()` command.

```{r}
#| echo: true
#| eval: false 
## filter 
censoc_men <- censoc %>% filter(sex == 1)
censoc_women <- censoc %>% filter(sex == 2)

## histogram for men 
ggplot(data = censoc_men) + 
  geom_histogram(aes(x = death_age)) 

## histogram for women 
ggplot(data = censoc_women) + 
  geom_histogram(aes(x = death_age)) 
```

5.  Now try adding the following line to the histogram you made in question 1: `+ facet_wrap(~sex)`

```{r}
#| echo: true
#| eval: true
ggplot(data = censoc) + 
  geom_histogram(aes(x = death_age)) + 
  facet_wrap(~sex)
```

## Best practices (opinionated)

-   **Style**: use descriptive names and "snake_case"
-   **Documentation**: Start commenting your code early, it's a good habit for the future.
-   **Learn `tidyverse`**: It offers a more coherent syntax and is widely used in data science.
-   **Eventually**: R-packages, github integration, etc.

## When you're stuck

-   Google

    -   Lots of packages have documentation available online

    -   Stack overflow -- excellent resource

-   Use help syntax (e.g., `?dplyr`)

-   GPT4 (decent, but be careful!)

## Resources for learning more

1.  R for data science (<https://r4ds.hadley.nz/>)
2.  Data visualization: a practical introduction (<https://socviz.co/>)

```{r, echo=FALSE, fig.width=6, fig.height=10}
knitr::include_graphics(here("slides/intro_r_day2_files/figs/r_for_datascience.png"))
```

## Questions? 

## In-class exercise 4 {.smaller}

Do homeowners in the United States live longer than renters in the United States?

1.  Google "IPUMS ownershp variable" and look at what each numerical value means.
2.  Recode `ownershp` to create a character variable `homeowner` that takes value "homeowner" or "renter". Filter out cases where we don't know whether someone was a homeowner or not.
3.  Make a histogram on the age of death for "homeowner" and "renter" groups using `ggplot`
4.  Calculate the average age of death for "homeowner" and "renter" groups. Which group lives longer, on average? Does this analysis tell us anything about homeownership and longevity?

## Exercise 4 solution {.smaller}

2.  Recode `ownershp` to create a character variable `homeowner` that takes value "homeowner" or "renter". Filter out cases where we don't know whether someone was a homeowner or not.

```{r}
#| echo: true
#| eval: true
censoc <- censoc %>% 
  filter(ownershp != 0) %>% 
  mutate(homeowner = case_when(
    ownershp == 1 ~ "homeowner",
    ownershp == 2 ~ "renter"
  ))
```

3.  Make a histogram on the age of death for "homeowner" and "renter" groups using `ggplot`

```{r}
#| echo: true
#| eval: true
censoc %>% 
  ggplot(aes(x = death_age)) + 
  geom_histogram() + 
  facet_wrap(~homeowner)
```
## Exercise 4 solution (cont.)

4.  Calculate the average age of death for "homeowner" and "renter" groups. Which group lives longer, on average? Does this analysis tell us anything about homeownership and longevity?

```{r}
#| echo: true
#| eval: true
censoc %>% 
  group_by(homeowner) %>% 
  summarize(mean(death_age))
```



## Thank you

-   Course materials available from:

    -   [www.github.com/caseybreen/intro_r](www.github.com/caseybreen/intro_r)

-   Recommendation: try to finish exercises

-   Questions: [casey.breen\@sociology.ox.ac.uk](casey.breen@sociology.ox.ac.uk)
